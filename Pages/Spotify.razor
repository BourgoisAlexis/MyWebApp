@using Microsoft.AspNetCore.Components.Web;
@using SpotifyAPI.Web;
@using Models;
@using BlazorApp1.Components;
@using Newtonsoft.Json;
@page "/spotify"

<PageTitle>Spotify</PageTitle>

<div class="d-flex flex-column align-content-center align-items-center">
    @if (AppModel.loading) {
        <LoadingSpinner></LoadingSpinner>
    }
    else {
        <div class="m-3 d-flex flex-row align-content-center align-items-center justify-content-center">
            @foreach (SpotifyMoodModel mood in _moods) {
                <div class="btn-spotify" @onclick="() => SearchMood(mood)">
                    <span class="m-2 @mood.icon"></span>
                    <span class="m-2">@mood.id</span>
                </div>
            }
        </div>

        <div class="container-disc">
            @if (context != null) {
                FullTrack track = context.Item as FullTrack;
                <img class="disc" src="@track.Album.Images[0].Url" />
            }
        </div>

        <div class="footer-spotify">
            <div class="progress">
                <div class="progress-bar" style="width:@(GetTrackerPosition())%" role="progressbar" aria-valuenow="@(GetTrackerPosition())" aria-valuemin="0" aria-valuemax="100"></div>
            </div>

            <div class="content">
                @if (context != null) {
                    FullTrack track = context.Item as FullTrack;

                    <div class="icon">
                        <span class="@_icon"></span>
                    </div>
                    <div class="player">
                        <span>@track.Name</span>
                        <span>@track.Artists[0].Name</span>
                        <span>@track.Album.Name</span>
                    </div>
                }
            </div>
        </div>
    }
</div>


@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager
@code {
    #region Variables
    private bool _connected = false;

    private bool _playing => context != null ? context.IsPlaying : false;
    private string _icon => _playing ? "bi-pause" : "bi-play";

    private SpotifyModel model => AppModel.SpotifyModel;
    private CurrentlyPlayingContext context => model.currentlyPlayingContext;

    private List<SpotifyMoodModel> _moods = new List<SpotifyMoodModel>();
    #endregion


    protected override Task OnInitializedAsync() {
        _moods.Clear();
        _moods.Add(new SpotifyMoodModel("Full focus", "bi-book",
            new List<string[]> { new string[] { "breackcore", "chill" }, new string[] { "vagabond", "chill" }, new string[] { "chillhop", "chill" }, },
            new string[] { "chillhop" },
            new string[] { "Nujabes", "68+1" }));

        _moods.Add(new SpotifyMoodModel("Ça game", "bi-controller",
            new List<string[]> { new string[] { "breackcore", "chill" }, new string[] { "chillhop", "chill" }, new string[] { "anime" } },
            new string[] { "anime" },
            new string[] { "Doja_Cat", "Ariana_Grande", "League_of_Legends", "Ado" }));

        _moods.Add(new SpotifyMoodModel("Ça bouge", "bi-boombox",
            new List<string[]> { new string[] { "funk", "old" } },
            new string[] { "funk", "nudisco", "futurefunk", "house" },
            new string[] { "Macross_82-99" }));

        _moods.Add(new SpotifyMoodModel("Random", "bi-shuffle",
            new List<string[]> { new string[] { "chill" } },
            new string[] { "funk", "rock", "rap", "anime", "pop", "disco" },
            new string[] { "Nujabes" }));

        return base.OnInitializedAsync();
    }

    protected override async void OnAfterRender(bool firstRender) {
        if (firstRender) {
            if (string.IsNullOrEmpty(model.code)) {
                UriBuilder b = new UriBuilder(navigationManager.Uri);
                var q = System.Web.HttpUtility.ParseQueryString(b.Query);
                string result = q["code"];

                if (!string.IsNullOrEmpty(result))
                    model.code = result;
            }

            _connected = !string.IsNullOrEmpty(model.code);

            if (!_connected) {
                Auth();
            }
            else {
                if (model.spotifyClient == null)
                    await Client(model.code);

                await GetPlayer();
                StateHasChanged();
                Polling();
            }
        }

        AppModel.loading = false;

        base.OnAfterRender(firstRender);
    }

    private void Auth() {
        (AppModel.SpotifyModel.verifier, AppModel.SpotifyModel.challenge) = PKCEUtil.GenerateCodes();
        var loginRequest = new LoginRequest(
            new Uri(model.redirect_uri),
            model.client_id,
            LoginRequest.ResponseType.Code
            ) {
                CodeChallengeMethod = "S256",
                CodeChallenge = model.challenge,
                Scope = new[] {
                    Scopes.UserReadCurrentlyPlaying,
                    Scopes.UserReadPlaybackState,
                    Scopes.UserModifyPlaybackState,
                }
            };

        var uri = loginRequest.ToUri();
        Redirect(uri.ToString());
    }

    private void Redirect(string uri) {
        if (string.IsNullOrEmpty(uri))
            return;

        jsRuntime.InvokeVoidAsync("open", uri, "_self");
    }

    private async Task Client(string code) {
        model.oAut = new OAuthClient();
        PKCETokenResponse resp = await model.oAut.RequestToken(
            new PKCETokenRequest(model.client_id, code, new Uri(model.redirect_uri), model.verifier)
        );

        model.spotifyClient = new SpotifyClient(resp);
    }

    private async Task GetPlayer() {
        model.currentlyPlayingContext = await model.spotifyClient.Player.GetCurrentPlayback();
    }

    private void SearchMood(SpotifyMoodModel mood) {
        int sum = mood.tags.Count + mood.genres.Length + mood.artists.Length;
        Random r = new Random();
        int random = r.Next(0, sum);

        Console.WriteLine($"random:{random} / sum:{sum}");

        int start = 0;
        int max = mood.tags.Count;
        if (random < max) {
            SearchTags(mood.tags[random]);
            return;
        }
        start += mood.tags.Count;
        max += mood.genres.Length;
        if (random < max) {
            SearchGenre(mood.genres[random - start]);
            return;
        }
        start += mood.genres.Length;
        max += mood.artists.Length;
        if (random < max) {
            SearchArtist(mood.artists[random - start]);
            return;
        }
    }

    private void SearchTags(string[] tags) {
        string query = string.Empty;
        for (int i = 0; i < tags.Length; i++) {
            query += $"{(i > 0 ? "_" : "")}{tags[i]}";
        }

        SearchPlaylist(query);
    }

    private void SearchGenre(string genre) {
        SearchPlaylist($"genre:{genre}");
    }

    private async void SearchArtist(string artist) {
        string query = $"artist:{artist}";

        SearchRequest req = new SearchRequest(SearchRequest.Types.Artist, query);
        req.Limit = 5;
        SearchResponse resp = await model.spotifyClient.Search.Item(req);

        if (resp.Artists.Items != null && resp.Artists.Items.Count > 0)
            Play(resp.Artists.Items[0].Uri);
    }

    private async void SearchPlaylist(string query) {
        FullPlaylist playlist = null;
        SearchRequest req = new SearchRequest(SearchRequest.Types.Playlist, query);
        req.Limit = 10;
        SearchResponse resp = await model.spotifyClient.Search.Item(req);

        Console.WriteLine(query);

        if (resp.Playlists.Items != null && resp.Playlists.Items.Count > 0) {
            Random r = new Random();
            playlist = resp.Playlists.Items[r.Next(0, resp.Playlists.Items.Count - 1)];
        }

        if (playlist != null)
            Play(playlist.Uri);
    }

    private async void Play(string uri) {
        PlayerResumePlaybackRequest req = new PlayerResumePlaybackRequest();
        req.ContextUri = uri;
        await model.spotifyClient.Player.ResumePlayback(req);
    }

    private int GetTrackerPosition() {
        if (context == null)
            return 0;

        int duration = (context.Item as FullTrack).DurationMs;
        int progress = context.ProgressMs;
        int result = (int)Math.Floor(((float)progress / (float)duration) * 100);

        return result;
    }

    private async void Polling() {
        for (int i = 0; i < 5; i++) {
            await Task.Delay(1000);
            if (_playing)
                context.ProgressMs += 1000;

            StateHasChanged();
        }
        await GetPlayer();
        Polling();
    }
}

<style>
    .container-disc {
        position: absolute;
        top: 10rem;
        bottom: 8rem;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .container-disc .disc {
            height: 70%;
            border-radius: 100%;
            border-style: solid;
            border-width: 0.2rem;
            border-color: @AppModel.colorTint;
            animation: spin 10s linear infinite;
        }

    .btn-spotify {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        margin: 0.5rem;
        border-radius: 0.5rem;
        width: 8rem;
        height: 3rem;
        background-color: @AppModel.color;
        color: @AppModel.light;
        transition-duration: 100ms;
        transition-property: background-color;
    }

        .btn-spotify:hover {
            background-color: @AppModel.colorTint;
            transition-duration: 100ms;
            transition-property: background-color;
        }

    .footer-spotify {
        position: absolute;
        width: 80%;
        height: 6rem;
        bottom: 1rem;
        background-color: rgba(255, 255, 255, 0.1);
        overflow: clip;
        border-radius: 0.5rem;
    }

        .footer-spotify .content {
            position: relative;
            bottom: 0;
            height: 95%;
        }

            .footer-spotify .content .player {
                position: absolute;
                width: 80%;
                left: 10%;
                height: 100%;
                display: flex;
                flex-direction: row;
                justify-content: center;
                align-items: center;
            }

                .footer-spotify .content .player span {
                    margin: 0 2rem;
                }

            .footer-spotify .content .icon {
                height: 70%;
                width: 10%;
                border-radius: 1rem;
                border-style: solid;
                border-width: 0.2rem;
                border-color: @AppModel.colorTint;
                position: absolute;
                left: 2rem;
                top: 15%;
                display: flex;
                justify-content: center;
                align-items: center;
            }

                .footer-spotify .content .icon span {
                    font-size: 2rem;
                }

        .footer-spotify .progress {
            top: 0;
            width: 100%;
            height: 5%;
            border-radius: 0;
            background-color: @AppModel.colorTint;
        }

            .footer-spotify .progress .progress-bar {
                background-color: @AppModel.color;
            }

    @@keyframes spin {
        0% {
            transform: rotateZ(0deg);
        }

        50% {
            transform: rotateZ(360deg);
        }

        100% {
            transform: rotateZ(720deg);
        }
    }
</style>
